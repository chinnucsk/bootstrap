# All of rake-pipeline's web goodness lives here.
require "rake-pipeline-web-filters"
require "json"

# All of our outputs will be relative to the `public/`
# directory.
output "public"

# All of our inputs to the pipeline live under the `app/`
# directory. We could also specify a glob if we wanted to
# limit the files in that directory, e.g.:
#
#   input "app", "**/*.scss"
#
# would limit the input to just scss files. All of our paths
# inside this Assetfile will be relative to this directory.
input "app" do

  # Here we specify a match block so we can apply a filter to
  # a subset of the files in our input directory. We're turning
  # our handlebars template files into javascript files.
  match "templates/**/*.handlebars" do
    handlebars key_name_proc: proc { |input|
      path = input.path.dup
      path.sub!(/^templates\//, '')
      path.sub(/\.handlebars$/, '')
    } do |input|
      "#{input}.js"
    end
  end

  # Now we match all the rest of the JavaScript files. Because the
  # outputs of our handlebars filter are JavaScript files, those
  # will get matched by this block, too.
  match "*.js" do
    # The minispade helper wraps each JS file in some code to
    # register it with the [minispade](https://github.com/wycats/minispade)
    # module loader.

    minispade :rewrite_requires => true, :string => true, :module_id_generator => proc { |input|
      # The `:module_id_generator` option customizes the name each file
      # gets registered under. Here we're changing a name like this:
      #    javascripts/vendor/ember.js
      # into:
      #    vendor/ember
      #
      # So using minispade, we can write:
      #    minispade.require('vendor/ember');
      # in our JS when we want to load ember.js.
      id = input.path.dup
      id.sub!(/\.js$/, '')
      id.sub!(/^javascripts\//, '')
      id.sub!(/^templates\//, '')
      id
    }

    # After being wrapped in the minispade code, we want to concatenate
    # all the javascript files together.
    concat "application.js"
  end

  # Now for our stylesheets. We're using Sass. We want to use
  # Sass's `@import` statement to control the order in which our
  # stylesheets get loaded, so we only match a single master
  # .scss file, and use `@import` from there to load the rest.
  match "stylesheets/**/*.{css,scss}" do
    # The `:additional_load_paths` option lets us tell Sass that
    # it should look in our styles directory to find `@import`s.
    scss :additional_load_paths => "stylesheets"

    concat "application.css"
  end
end

# Finally, we keep our static assets that don't need any processing
# in a `static/` directory.
input "static" do
  copy
end

input "tests" do
  match "*.js" do
    minispade :rewrite_requires => true, :string => true, :module_id_generator => proc { |input|
      id = input.path.dup
      id.sub!(/\.js$/, '')
      "tests/#{id}"
    }

    concat "tests.js"
  end

  match "*.{html,css}" do
    copy do |input|
      "tests/#{input}"
    end
  end
end

# vim:ft=ruby
